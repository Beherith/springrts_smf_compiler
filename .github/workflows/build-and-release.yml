name: CI Linux

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build_linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          sudo apt-get install qtbase5-dev qt5-qmake
          pip install -r src/requirements.txt

      - name: Install build dependencies
        run: pip install -r build/requirements-dev.txt

      - name: Make staging directory for build
        run: mkdir stage

      - name: Package tools for Linux
        run: cp -r tools/linux stage/tools

      - name: Package build
        run: |
          cd build/linux
          sh build.sh
          cd ../..
          cp -r bin/pymapconv/* stage

      - uses: actions/upload-artifact@v2
        with:
          name: linux-build
          path: stage/

  build_windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          choco install qt5-default
          pip install -r src/requirements.txt

      - name: Install build dependencies
        run: |
          pip install -r build/requirements-dev.txt

      - name: Make staging directory for build
        run: mkdir stage

      - name: Package tools for Windows
        run: cp -r tools/win stage/tools

      - name: Package build
        run: |
          cd ./build/win
          ./build.bat
          cd ../..
          cp -r bin/pymapconv/* stage

      - uses: actions/upload-artifact@v2
        with:
          name: windows-build
          path: stage/

  release:
    runs-on: ubuntu-latest
    needs:
      - build_linux
      - build_windows

    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3

      - name: Determine Version
        run: echo "::set-output name=version::$(python ./src/version.py)"
        id: version

      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          body: PyMapConv v${{ steps.version.outputs.version }}
          release_name: ${{ steps.version.outputs.version }}
          tag_name: ${{ github.ref }}
        env:
          GITHUB_TOKEN: ${{ github.token }}